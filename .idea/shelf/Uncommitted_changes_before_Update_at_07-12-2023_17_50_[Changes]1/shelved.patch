Index: graph_flyod.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/graph_flyod.cpp b/graph_flyod.cpp
deleted file mode 100644
--- a/graph_flyod.cpp	
+++ /dev/null	
@@ -1,52 +0,0 @@
-#include<bits/stdc++.h>
-using namespace std;
-#define INF 99999
-#define V 4
-void flyod(int graph[V][V])
-{
-	int dist[V][V];
-	for(int i=0;i<V;i++)
-	{
-		for(int j=0;j<V;j++)
-		dist[i][j] = graph[i][j];
-	}
-	for(int k=0;k<V;k++)
-	{
-		for(int i=0;i<V;i++)
-		{
-			for(int j=0;j<V;j++)
-			{
-				if(dist[i][k] + dist[k][j] < dist[i][j])
-				dist[i][j] = dist[i][k] + dist[k][j];
-			}
-		}
-	}
-	for(int i=0;i<V;i++)
-	{
-		for(int j=0;j<V;j++)
-		{
-			if (dist[i][j] == INF)
-                printf("%7s", "INF");
-            else
-                printf ("%7d", dist[i][j]);
-		}
-		printf("\n");
-	}
-}
-int main()
-{
-	
-	//cin>>V;
-//	int graph[V][V];
-//	for(int i=0;i<V;i++)
-//	{
-//		for(int j=0;j<V;j++)
-//		cin>>graph[i][j];
-//	}
-int graph[V][V] = { {0,   5,  INF, 10},
-                        {INF, 0,   3, INF},
-                        {INF, INF, 0,   1},
-                        {INF, INF, INF, 0}
-                      };
-	flyod(graph);
-}
Index: railwayPlatformm.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/railwayPlatformm.cpp b/railwayPlatformm.cpp
deleted file mode 100644
--- a/railwayPlatformm.cpp	
+++ /dev/null	
@@ -1,31 +0,0 @@
-#include<bits/stdc++.h>
-using namespace std;
-int findPlatform(int arr[], int dept[], int n){
-	sort(arr,arr+n);
-	sort(dept,dept+n);
-	int i=1,j=0;
-	int platform=1,temp=1;
-	while(i < n && j < n){
-		if(arr[i] <= dept[j]){
-			temp++;
-			i++;
-			platform = max(temp,platform);
-		}else{
-			temp--;
-			j++;
-		}
-		
-	}
-	return platform;
-}
-int main(){
-	int n;
-	cin >> n;
-	int arr[n];
-	for(int i=0;i<n;i++)
-		cin >> arr[i];
-	int dept[n];
-	for(int i=0;i<n;i++)
-		cin >> dept[i];
-	cout<<findPlatform(arr,dept,n);		
-}
Index: largestRegionMatrix.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/largestRegionMatrix.cpp b/largestRegionMatrix.cpp
deleted file mode 100644
--- a/largestRegionMatrix.cpp	
+++ /dev/null	
@@ -1,43 +0,0 @@
-#include<bits/stdc++.h>
-using namespace std;
-#define ROW 4
-#define COL 5
-bool isSafe(int M[][COL],int row, int col, bool visited[][COL]){
-	return (row>=0 && row<ROW) && (col >=0 && col<COL)&&
-			 (M[row][col] && !visited[row][col]);
-}
-void DFS(int M[][COL],int row,int col,bool visited[][COL],int &cntww){
-	static int rowNbr[] = {-1,-1,-1,0,0,1,1,1};
-	static int colNbr[] = {-1,0,1,-1,1,-1,0,1};
-	visited[row][col] = true;
-	for(int k=0;k<8;k++){
-		if(isSafe(M,row+rowNbr[k],col+colNbr[k],visited))
-			DFS(M,row+rowNbr[k],col+colNbr[k],visited);
-	}
-}
-int largestRegion(int M[][COL]){
-	bool visited[ROW][COL];
-	int result = INT_MIN;
-	memset(visited,0,sizeof(visited));
-	int cnt=0;
-	for(int i=0;i<ROW;i++){
-		for(int j=0;j<COL;j++){
-		
-			if(M[i][j] && !visited[i][j]){
-				int cnt=1;
-				DFS(M,i,j,visited,cnt);
-				result = max(result,cnt);
-			}
-				
-		}
-	}
-	return result;
-}
-int main(){
-	int arr[ROW][COL];
-	for(int i=0;i<ROW;i++){
-		for(int j=0;j<COL;j++)
-			cin >> arr[i][j];
-	}
-	cout<<largestRegion(arr)<<endl;
-}
Index: knapSack.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/knapSack.cpp b/knapSack.cpp
deleted file mode 100644
--- a/knapSack.cpp	
+++ /dev/null	
@@ -1,38 +0,0 @@
-#include<bits/stdc++.h>
-using namespace std;
-int knapSack(int wt[], int val[], int n, int W){
-	int T[n+1][W+1];
-	for(int i=0;i<=n;i++){
-		for(int j=0;j<=W;j++){
-			if(i==0 || j==0)
-				T[i][j]=0;
-			else if(wt[i-1] <= j){
-				T[i][j] = max(T[i-1][j],T[i-1][j-wt[i-1]]+val[i-1]);
-			//	cout<<wt[i-1]<<" "<<i<<" "<<j<<endl;
-			}
-				
-			else T[i][j] = T[i-1][j];		
-		}
-	}
-//	for(int i=0;i<=n;i++){
-//		for(int j=0;j<=W;j++)
-//			cout<<T[i][j]<<" ";
-//		cout<<endl;
-//	}
-	return T[n][W];
-}
-int main(){
-	int n;
-	cin >> n;
-	int wt[n];
-	int val[n];
-	for(int i=0;i<n;i++){
-		cin >> wt[i];
-	}
-	for(int i=0;i<n;i++){
-		cin >> val[i];
-	}
-	int totalWeight;
-	cin >>totalWeight;
-	cout<<knapSack(wt,val,n,totalWeight)<<endl;
-}
Index: maximumLevelSum.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/maximumLevelSum.cpp b/maximumLevelSum.cpp
deleted file mode 100644
--- a/maximumLevelSum.cpp	
+++ /dev/null	
@@ -1,48 +0,0 @@
-#include<bits/stdc++.h>
-using namespace std;
-struct Node{
-	int data;
-	Node *left;
-	Node *right;
-};
-struct Node *getNewNode(int data){
-	struct Node *temp = (Node*)malloc(sizeof(Node));
-	temp->data = data;
-	temp->left = NULL;
-	temp->right = NULL;
-	return temp;
-}
-void maxLevelSum(struct Node *root){
-	if(root == NULL)
-		return;
-	queue<Node*> q;
-	q.push(root);
-	int result = root->data;
-	int sum=0;
-	while(!q.empty()){
-		int cnt = q.size();
-		int sum=0;
-		while(cnt--){
-			Node *temp = q.front();
-			q.pop();
-			sum+=temp->data;
-			if(temp->left)
-				q.push(temp->left);
-			if(temp->right)
-				q.push(temp->right);
-	}
-	result = max(result,sum);
-		
-	}
-	cout<<"Result ki val "<<result<<endl;	
-}
-int main(){
-	struct Node *root = getNewNode(4);
-	root->left = getNewNode(2);
-	root->right = getNewNode(-5);
-	root->left->left = getNewNode(-1);
-	root->left->right = getNewNode(3);
-	root->right->left = getNewNode(-2);
-	root->right->right = getNewNode(6);
-	maxLevelSum(root);
-}
Index: mergeSort.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mergeSort.cpp b/mergeSort.cpp
deleted file mode 100644
--- a/mergeSort.cpp	
+++ /dev/null	
@@ -1,53 +0,0 @@
-#include<bits/stdc++.h>
-using namespace std;
-void merge(int arr[], int low, int mid, int high){
-	int nL = mid-low + 1;
-	int nR = high-mid;
-	int left[nL];
-	int right[nR];
-	for(int i=0;i<nL;i++)
-		left[i] = arr[i+low];
-	for(int j=0;j<nR;j++)
-		right[j] = arr[j+mid+1];
-	int i=0,j=0,k=low;
-	while(i<nL && j<nR){
-		if(left[i] <= right[j]){
-			arr[k] = left[i];
-			i++;
-		}else{
-			arr[k] = right[j];
-			j++;
-		}
-		k++;
-	}	
-	while(i<nL){
-		arr[k] = left[i];
-		i++;
-		k++;
-	}
-	while(j<nL){
-		arr[k] = right[j];
-		j++;
-		k++;
-	}
-			
-}
-void mergeSort(int arr[], int low, int high){
-	if(low < high){
-		int mid  = low + (high-low)/2;
-		mergeSort(arr,low,mid);
-		mergeSort(arr,mid+1,high);
-		merge(arr,low,mid,high);
-	}
-}
-int main(){
-	int n;
-	cin >> n;
-	int arr[n];
-	for(int i=0;i<n;i++)
-		cin >> arr[i];
-	mergeSort(arr,0,n-1);
-	for(int i=0;i<n;i++)
-	cout<<arr[i]<<" ";
-	cout<<endl;	
-}
Index: addGreaterValueToEveryNode.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/addGreaterValueToEveryNode.cpp b/addGreaterValueToEveryNode.cpp
deleted file mode 100644
--- a/addGreaterValueToEveryNode.cpp	
+++ /dev/null	
@@ -1,45 +0,0 @@
-#include<bits/stdc++.h>
-using namespace std;
-struct Node{
-	int data;
-	Node *left;
-	Node *right;
-};
-struct Node *getNewNode(int data){
-	struct Node *temp = (Node*)malloc(sizeof(Node));
-	temp->data = data;
-	temp->left = NULL;
-	temp->right = NULL;
-	return temp;
-}
-void addGreaterValueToEveryNode(struct Node *root, int &sum){
-	if(root == NULL)
-		return;
-	addGreaterValueToEveryNode(root->right,sum);
-	sum +=root->data;
-	root->data = sum;	
-	addGreaterValueToEveryNode(root->left,sum);	
-		
-}
-void inorder(struct Node *root){
-	if(root == NULL)
-		return;
-	inorder(root->left);
-		cout<<root->data<<" ";
-	inorder(root->right);		
-}
-int main(){
-	struct Node *root = getNewNode(50);
-	root->left = getNewNode(30);
-	root->right = getNewNode(70);
-	root->left->left = getNewNode(20);
-	root->left->right = getNewNode(40);
-	root->right->left = getNewNode(60);
-	root->right->right = getNewNode(80);
-	cout<<"Before modifying tree \n";
-	inorder(root);
-	int sum=0;
-	addGreaterValueToEveryNode(root,sum);
-	cout<<"\n After modifying tree \n";
-	inorder(root);
-}
Index: suareRootFloor.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/suareRootFloor.cpp b/suareRootFloor.cpp
deleted file mode 100644
--- a/suareRootFloor.cpp	
+++ /dev/null	
@@ -1,27 +0,0 @@
-#include<bits/stdc++.h>
-using namespace std;
-int sqrtFloor(int n){
-	int l = 1,r=n/2,ans=0;
-	while(l<=r){
-		int mid = l+(r-l)/2;
-		if(mid*mid == n)
-			return mid;
-		else if(mid*mid < n){
-			l = mid+1;
-			ans = mid;
-		}
-		else r = mid-1;
-				
-	}
-	return ans;
-}
-int main(){
-	int t;
-	cin >> t;
-	while(t--){
-	int n;
-	cin >> n;
-	cout<<sqrtFloor(n)<<endl;
-}
-return 0;
-}
Index: Atoi.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Atoi.cpp b/Atoi.cpp
deleted file mode 100644
--- a/Atoi.cpp	
+++ /dev/null	
@@ -1,45 +0,0 @@
-#include<bits/stdc++.h>
-using namespace std;
-bool isnumeric(char x){
-	return x>='0' && x<='9';
-}
-int atoi(string str){
-	int val=0;
-	int sign = 1,i=0;
-	if(str[i]=='-'){
-		sign = -1;
-		i++;
-	}
-		
-	for(;i<str.length();i++){
-		if(!isnumeric(str[i])){
-			return 0;
-		}
-		val = val*10+str[i]-'0';
-	}
-	return sign*val;
-}
-int myAtoi(string str){
-	int val = 0;
-	int sign=1,i=0;
-	while(str[i] == ' ')
-		i++;
-	if(str[i]=='-' || str[i]=='+')
-		sign = 1-2*(str[i++]=='-');	
-	while(str[i]>='0' && str[i] <= '9'){
-		if(val > INT_MAX/10 || (val == INT_MAX && str[i]-'0'>7)){
-			if(sign ==1)
-				return INT_MAX;
-			else return INT_MIN;
-		}
-		val = val*10+str[i++]-'0';
-	}
-	return sign*val;	
-}
-int main(){
-	string str;
-	cin >> str;
-	cout<<atoi(str)<<endl;
-	cout<<myAtoi(str)<<endl;
-	return 0;
-}
Index: sumTreeCheck.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/sumTreeCheck.cpp b/sumTreeCheck.cpp
deleted file mode 100644
--- a/sumTreeCheck.cpp	
+++ /dev/null	
@@ -1,36 +0,0 @@
-#include<bits/stdc++.h>
-using namespace std;
-struct Node{
-	int data;
-	Node *left;
-	Node *right;
-};
-struct Node *getNewNode(int data){
-	struct Node *temp = (Node*)malloc(sizeof(Node));
-	temp->data = data;
-	temp->left = NULL;
-	temp->right = NULL;
-	return temp;
-}
-int sum(struct Node *root){
-	if(root == NULL)
-		return 0;
-	return sum(root->left)+root->data+sum(root->right);	
-}
-bool sumTree(struct Node *root){
-	if(root == NULL || (root->left == NULL && root->right == NULL))
-		return true;
-	int ls = sum(root->left);
-	int rs = sum(root->right);
-	return (root->data == ls+rs) && sumTree(root->left) && sumTree(root->right);	
-}
-int main(){
-	struct Node *root = getNewNode(26);
-	root->left = getNewNode(10);
-	root->right = getNewNode(3);
-	root->left->left = getNewNode(4);
-	root->left->right = getNewNode(6);
-	root->right->right = getNewNode(3);
-	sumTree(root) ? cout<<"Yes\n" : cout<<"No\n";
-	cout<<sum(root)<<endl;
-}
Index: TopViewOfTree.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TopViewOfTree.cpp b/TopViewOfTree.cpp
deleted file mode 100644
--- a/TopViewOfTree.cpp	
+++ /dev/null	
@@ -1,46 +0,0 @@
-#include<bits/stdc++.h>
-using namespace std;
-struct Node{
-	int data;
-	Node *left;
-	Node *right;
-};
-struct Node *getNewNode(int data){
-	struct Node *temp = (Node*)malloc(sizeof(Node));
-	temp->data = data;
-	temp->left = NULL;
-	temp->right = NULL;
-	return temp;
-}
-void TopView(struct Node *root){
-	if(root == NULL)
-		return ;
-	queue<pair<Node*,int> > q;
-	q.push(make_pair(root,0));
-	map<int,int> mp;
-	while(!q.empty()){
-		pair<Node*,int> p = q.front();
-		q.pop();
-		Node *temp = p.first;
-		int hd = p.second;
-		if(mp.find(hd) == mp.end()){
-			mp[hd] = temp->data;
-			cout<<temp->data<<" ";
-		}
-		if(temp->left)
-			q.push(make_pair(temp->left,hd+1));
-		if(temp->right)
-			q.push(make_pair(temp->right,hd-1));	
-	}	
-}
-int main(){
-	struct Node *root = getNewNode(1);
-	root->left = getNewNode(2);
-	root->right = getNewNode(3);
-	root->left->left = getNewNode(4);
-	root->left->right = getNewNode(5);
-	root->right->left = getNewNode(6);
-	root->right->right = getNewNode(7);
-	TopView(root);
-}
-
Index: minimumJumpToReachEnd.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/minimumJumpToReachEnd.cpp b/minimumJumpToReachEnd.cpp
deleted file mode 100644
--- a/minimumJumpToReachEnd.cpp	
+++ /dev/null	
@@ -1,26 +0,0 @@
-#include<bits/stdc++.h>
-using namespace std;
-int minJump(int arr[],int n){
-	int temp[n];
-	for(int i=0;i<n;i++)
-		temp[i] = INT_MAX;
-	temp[0] = 0;
-	for(int i=1;i<n;i++){
-		for(int j=0;j<i;j++){
-			if(j+arr[j] >= i ){
-				temp[i] = min(temp[i],temp[j]+1);
-			}
-		}
-	}	
-	for(int i=0;i<n;i++)
-		cout<<temp[i]<<" ";
-	return temp[n-1];	
-}
-int main(){
-	int n;
-	cin >> n;
-	int arr[n];
-	for(int i=0;i<n;i++)
-		cin >> arr[i];
-	cout<<minJump(arr,n)<<endl;	
-}
Index: LCS.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LCS.cpp b/LCS.cpp
deleted file mode 100644
--- a/LCS.cpp	
+++ /dev/null	
@@ -1,27 +0,0 @@
-#include<bits/stdc++.h>
-using namespace std;
-int LCS(string str1, string str2){
-	int n = str1.length();
-	int m = str2.length();
-	int T[n+1][m+1];
-	for(int i=0;i<=n;i++){
-		for(int j=0;j<=m;j++){
-			if(i==0 || j==0)
-				T[i][j]=0;
-			else if(str1[i-1] == str2[j-1])
-				T[i][j] = T[i-1][j-1]+1;
-			else T[i][j] = max(T[i-1][j],T[i][j-1]);		
-		}
-	}
-//	for(int i=0;i<=n;i++){
-//		for(int j=0;j<=m;j++)
-//			cout<<T[i][j]<<" ";
-//		cout<<endl;	
-//	}
-	return T[n][m];
-}
-int main(){
-	string str1,str2;
-	cin >> str1 >> str2;
-	cout<<LCS(str1,str2)<<endl;
-}
Index: DFS.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DFS.cpp b/DFS.cpp
deleted file mode 100644
--- a/DFS.cpp	
+++ /dev/null	
@@ -1,31 +0,0 @@
-#include<bits/stdc++.h>
-using namespace std;
-vector<int> *adj;
-bool *visited;
-void DFS(int src){
-	visited[src] = true;
-	cout<<src<<" ";
-	for(int i=0;i<adj[src].size();i++){
-		if(!visited[adj[src][i]])
-			DFS(adj[src][i]);
-	}
-}
-int main(){
-	int nodes,edges;
-	cin >> nodes >> edges;
-	adj = new vector<int>[nodes+1];
-	visited = new bool[nodes]+1;
-	for(int i=0;i<=nodes;i++)
-		visited[i] = false;
-	for(int i=0;i<edges;i++){
-		int x,y;
-		cin >> x >> y;
-		adj[x].push_back(y);
-	//	adj[y].push_back(x);
-	}
-	DFS(2);	
-//	for(int i=0;i<nodes;i++){
-//		if(!visited[i])
-//			DFS(i); 
-//	}
-}
Index: tilingProblem.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tilingProblem.cpp b/tilingProblem.cpp
deleted file mode 100644
--- a/tilingProblem.cpp	
+++ /dev/null	
@@ -1,26 +0,0 @@
-#include<bits/stdc++.h>
-using namespace std;
-int tiling(int n){
-	int cnt=0;
-	if(n<=2)
-		return n;
-	int a=1,b=2;
-	for(int i=3;i<=n;i++){
-		cnt = a+b;
-		a = b;
-		b = cnt;
-	}	
-	return cnt;
-}
-int main(){
-	int t;
-	cin >> t;
-	while(t--){
-	
-	int n;
-	cin >> n;
-	cout<<tiling(n)<<endl;
-	
-}
-return 0;
-}
Index: SmallestWindowContainingAllCharacterOfAnotherString.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SmallestWindowContainingAllCharacterOfAnotherString.java b/SmallestWindowContainingAllCharacterOfAnotherString.java
deleted file mode 100644
--- a/SmallestWindowContainingAllCharacterOfAnotherString.java	
+++ /dev/null	
@@ -1,53 +0,0 @@
-public class SmallestWindow {
-
-    private static final int MAX_LEN = 256;
-
-    private static String findSmallestWindow(String s, String t) {
-        if(t.length() > s.length()) {
-            return "Not Possible";
-        }
-
-        int[] hash_s = new int[MAX_LEN];
-        int[] hash_t = new int[MAX_LEN];
-        
-        int cnt = 0, start=0, start_ind=-1, minLen = Integer.MAX_VALUE;
-
-        for(int i=0;i<t.length();i++){
-            hash_t[t.charAt(i)]++;
-        }
-
-        for(int j=0;j<s.length();j++){
-
-            hash_s[s.charAt(j)]++;
-
-            if(hash_t[s.charAt(j)] >= hash_s[s.charAt(j)]){
-                cnt++;
-            }
-
-            if(cnt == t.length()) {
-
-                while(hash_s[s.charAt(start)] > hash_t[s.charAt(start)] ||
-                hash_t[s.charAt(start)] == 0){
-                    if(hash_s[s.charAt(start)] > hash_t[s.charAt(start)]){
-                        hash_s[s.charAt(start)]--;
-                    }
-                    start++;
-                }
-                int len = j-start+1;
-                if(len < minLen) {
-                    minLen = len;
-                    start_ind = start;
-                }
-
-            }
-        }
-        return s.substring(start_ind, minLen+start_ind);
-    }
-
-    public static void main(String args[]) {
-        String s = "ADOBECODEBANC";
-        String t = "ABC";
-
-        System.out.println(findSmallestWindow(s,t));
-    }
-}
Index: graph_bfs.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/graph_bfs.cpp b/graph_bfs.cpp
deleted file mode 100644
--- a/graph_bfs.cpp	
+++ /dev/null	
@@ -1,49 +0,0 @@
-#include<bits/stdc++.h>
-using  namespace std;
-vector<int> adj[100];
-bool visited[100];
-void bfs(int s)
-{
-	queue<int> Q;
-	Q.push(s);
-	visited[s]=true;
-	while(!Q.empty())
-	{
-		int u  = Q.front();
-		cout<<u<<endl;
-		Q.pop();
-		for(int i=0;i<adj[u].size();i++)
-		{
-			if(!visited[adj[u][i]])
-			{
-				Q.push(adj[u][i]);
-				visited[adj[u][i]] = true;
-			}
-		}
-	}
-	
-}
-int main()
-{
-	int nodes,edges;
-	cin>>nodes>>edges;
-	for(int i=0;i<edges;i++)
-	{
-		int x,y,wt;
-		cin>>x>>y;
-		adj[x].push_back(y);
-	}
-	int src;
-	cin>>src;
-	bfs(src);
-	
-//4 6
-//0 1
-//0 2
-//1 2
-//2 0
-//2 3
-//3 3
-//2
-//output: 2 0 3 1
-}
Index: rodcutting.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/rodcutting.cpp b/rodcutting.cpp
deleted file mode 100644
--- a/rodcutting.cpp	
+++ /dev/null	
@@ -1,25 +0,0 @@
-#include<bits/stdc++.h>
-using namespace std;
-int maxPrice(int price[], int n){
-	
-   int val[n+1]; 
-   val[0] = 0; 
-    for(int i=1;i<=n;i++)
-    	val[i] = INT_MIN;
-   for (int i = 1; i<=n; i++) 
-   { 
-       for (int j = 0; j < i; j++) 
-         val[i] = max(val[i], price[j] + val[i-j-1]); 
-   } 
-  	for(int i=0;i<n;i++)
-  		cout<<val[i]<<" ";
-   return val[n]; 
-}
-int main(){
-	int n;
-	cin >> n;
-	int arr[n];
-	for(int i=0;i<n;i++)
-		cin >> arr[i];
-	cout<<maxPrice(arr,n)<<endl;	
-}
Index: minimumCoinChange.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/minimumCoinChange.cpp b/minimumCoinChange.cpp
deleted file mode 100644
--- a/minimumCoinChange.cpp	
+++ /dev/null	
@@ -1,35 +0,0 @@
-#include<bits/stdc++.h>
-using namespace std;
-int minCoinChange(int coin[],int n, int sum){
-	int T[n+1][sum+1];
-	for(int i=0;i<=n;i++){
-		for(int j=0;j<=sum;j++){
-			if(i==0 && j>0)
-				T[i][j] = INT_MAX;
-			else if(j==0)
-				T[i][j] = 0;
-			else if(coin[i-1] > j)
-				T[i][j] = T[i-1][j];
-			else
-				T[i][j] = min(T[i-1][j],1+T[i][j-coin[i-1]]);	
-		}
-	}
-	for(int i=1;i<=n;i++){
-		for(int j=0;j<=sum;j++)
-			cout<<T[i][j]<<" ";
-		cout<<endl;	
-	}
-	return T[n][sum];
-}
-int main(){
-	int n;
-	cin >> n;
-	int coin[n];
-	for(int i=0;i<n;i++)
-		cin >> coin[i];
-	sort(coin,coin+n);	
-	int changes;
-	cin >> changes;
-	cout<<minCoinChange(coin,n,changes)<<endl;	
-}
-
Index: quickSort.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quickSort.cpp b/quickSort.cpp
deleted file mode 100644
--- a/quickSort.cpp	
+++ /dev/null	
@@ -1,37 +0,0 @@
-#include<bits/stdc++.h>
-using namespace std;
-int swap(int &a, int &b){
-	int temp =a;
-	a=b;
-	b=temp;
-}
-int partition(int arr[],int low, int high){
-	int pivot = arr[high];
-	int i=(low-1);
-	for(int j=low;j<high;j++){
-		if(arr[j]<=pivot){
-			i++;
-			swap(arr[i],arr[j]);
-		}
-	}
-	swap(arr[i+1],arr[high]);
-	return i+1;
-}
-void quickSort(int arr[],int low, int high){
-	if(low < high){
-		int pivotIndex = partition(arr,low,high);
-		quickSort(arr,low,pivotIndex-1);
-		quickSort(arr,pivotIndex+1,high);
-	} 
-}
-int main(){
-	int n;
-	cin >> n;
-	int arr[n];
-	for(int i=0;i<n;i++)
-		cin >> arr[i];
-	quickSort(arr,0,n-1);	
-	for(int i=0;i<n;i++)
-		cout<<arr[i]<<" ";
-	cout<<endl;	
-}
Index: Kadane.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Kadane.cpp b/Kadane.cpp
deleted file mode 100644
--- a/Kadane.cpp	
+++ /dev/null	
@@ -1,19 +0,0 @@
-#include<bits/stdc++.h>
-using namespace std;
-int kadane(int arr[],int n){
-	int temp = arr[0];
-	int res = arr[0];
-	for(int i=1;i<n;i++){
-		temp = max(arr[i],arr[i]+temp);
-		res = max(res,temp);
-	}
-	return res;
-}
-int main(){
-	int n;
-	cin >> n;
-	int arr[n];
-	for(int i=0;i<n;i++)
-		cin >> arr[i];
-	cout<<kadane(arr,n)<<endl;	
-}
Index: graph_dfs.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/graph_dfs.cpp b/graph_dfs.cpp
deleted file mode 100644
--- a/graph_dfs.cpp	
+++ /dev/null	
@@ -1,39 +0,0 @@
-#include<bits/stdc++.h>
-using namespace std;
-vector<int> *adj;
-bool *visited;
-void dfs(int src)
-{
-	visited[src]=true;
-	cout<<src<<endl;
-	for(int i=0;i<adj[src].size();i++)
-	if(!visited[adj[src][i]])
-		dfs(adj[src][i]);
-}
-int main()
-{
-	int nodes,edges;
-	cin>>nodes>>edges;
-	adj = new vector<int>[nodes+1];
-	visited = new bool[nodes+1];
-	for(int i=0;i<edges;i++)
-	{
-		int x,y,wt;
-		cin>>x>>y;
-		adj[x].push_back(y);
-	}
-	int src;
-	cin>>src;
-	dfs(src);
-	
-//input	
-//4 6
-//0 1
-//0 2
-//1 2
-//2 0
-//2 3
-//3 3
-//2
-//output : 2 0 1 3
-}
Index: subsetSum.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/subsetSum.cpp b/subsetSum.cpp
deleted file mode 100644
--- a/subsetSum.cpp	
+++ /dev/null	
@@ -1,32 +0,0 @@
-#include<bits/stdc++.h>
-using namespace std;
-int subsetSum(int arr[],int n,int sum){
-	bool T[n+1][sum+1];
-	for(int i=0;i<=n;i++){
-		for(int j=0;j<=sum;j++){
-			if(i==0 && j>0)
-				T[i][j]=false;
-			else if(j==0)
-				T[i][j]=true;	
-			else if(j<arr[i-1])
-				T[i][j]=T[i-1][j];
-			else T[i][j] = T[i-1][j-arr[i-1]] || T[i-1][j];			
-		}
-	}
-	for(int i=0;i<=n;i++){
-		for(int j=0;j<=sum;j++)
-			cout<<T[i][j]<<" ";
-		cout<<endl;	
-	}
-	return T[n][sum];
-}
-int main(){
-	int n;
-	cin >> n;
-	int arr[n];
-	for(int i=0;i<n;i++)
-		cin >> arr[i];
-	int sum;
-	cin >> sum;
-	subsetSum(arr,n,sum)?cout<<"Yes\n":cout<<"No\n";	
-}
Index: graph_represent.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/graph_represent.cpp b/graph_represent.cpp
deleted file mode 100644
--- a/graph_represent.cpp	
+++ /dev/null	
@@ -1,28 +0,0 @@
-#include<bits/stdc++.h>
-using namespace std;
-int main()
-{
-	int nodes,edges;
-	vector<int > *adj;
-	cin>>nodes>>edges;
-	adj = new vector<int >[nodes+1];
-	for(int i=0;i<edges;i++)
-	{
-		int x,y,wt;
-		cin>>x>>y;
-		adj[x].push_back(y);
-	
-	}
-	
-	for(int i=1;i<=nodes;i++)
-	{
-		cout << "Adjacency list of node " << i << ": ";
-		for(int j=0;j<adj[i].size();j++)
-		{
-			if(j==adj[i].size()-1)
-			cout<<adj[i][j]<<endl;
-			else cout<<adj[i][j]<<" ->";
-		}
-	}
-	
-}
Index: graph_dijasktra.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/graph_dijasktra.cpp b/graph_dijasktra.cpp
deleted file mode 100644
--- a/graph_dijasktra.cpp	
+++ /dev/null	
@@ -1,45 +0,0 @@
-#include<bits/stdc++.h>
-using namespace std;
-#define pi pair<int,int>
-vector<pi>  *adj;
-void dijasktra(int src,int V)
-{
-	priority_queue<pi,vector<pi>,greater<pi> >Q;
-	Q.push(make_pair(0,src));
-	vector<int> dist(V,INT_MAX);
-	dist[src]=0;
-	while(!Q.empty())
-	{
-		int u=Q.top().second;
-		Q.pop();
-		for(int i=0;i<adj[u].size();i++)
-		{
-			int y = adj[u][i].first;
-			int w = adj[u][i].second;
-			if(dist[y]>dist[u]+w)
-			{
-				dist[y]  = dist[u] + w;
-				Q.push(make_pair(dist[y],y));
-			}
-		}
-	}
-	
-	for(int i=0;i<V;i++)
-	cout<<i<<"   "<<dist[i]<<endl;
-}
-int main()
-{
-	int nodes,edges;
-	cin>>nodes>>edges;
-	adj = new vector<pi>[nodes+1];
-	for(int i=0;i<edges;i++)
-	{
-		int x,y,wt;
-		cin>>x>>y>>wt;
-		adj[x].push_back(make_pair(y,wt));
-		adj[y].push_back(make_pair(x,wt));
-	}
-	int src;
-	cin>>src;
-	dijasktra(src,nodes);
-}
Index: maximumWidthOfTree.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/maximumWidthOfTree.cpp b/maximumWidthOfTree.cpp
deleted file mode 100644
--- a/maximumWidthOfTree.cpp	
+++ /dev/null	
@@ -1,45 +0,0 @@
-#include<bits/stdc++.h>
-using namespace std;
-struct Node{
-	int data;
-	Node *left;
-	Node *right;
-};
-struct Node *getNewNode(int data){
-	struct Node *temp = (Node*)malloc(sizeof(Node));
-	temp->data = data;
-	temp->left = NULL;
-	temp->right = NULL;
-	return temp;
-}
-int maximumWidth(struct Node *root){
-	if(root == NULL)
-		return 0;
-	queue<Node*> q;
-	q.push(root);
-	int result = 0;
-	while(!q.empty()){
-		
-		int cnt = q.size();
-		result = max(cnt,result);
-		while(cnt--){
-			Node *temp = q.front();
-			q.pop();
-			if(temp->left)
-				q.push(temp->left);
-			if(temp->right)
-				q.push(temp->right);	
-		}
-	}	
-	return result;
-}
-int main(){
-	struct Node *root = getNewNode(1);
-	root->left = getNewNode(2);
-	root->right = getNewNode(3);
-	root->left->left = getNewNode(4);
-	root->left->right = getNewNode(5);
-	root->right->left = getNewNode(6);
-	root->right->right = getNewNode(7);
-	cout<<maximumWidth(root)<<endl;
-}
Index: peakElement.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/peakElement.cpp b/peakElement.cpp
deleted file mode 100644
--- a/peakElement.cpp	
+++ /dev/null	
@@ -1,34 +0,0 @@
-#include<bits/stdc++.h>
-using namespace std;
-void peakElement(int arr[], int n){
-	if(arr[0]>arr[1])
-		cout<<arr[0]<<" ";
-	for(int i=1;i<n-1;i++){
-	//	cout<<arr[i-1]<<" "<<arr[i]<<" "<<arr[i+1]<<endl;
-		if(arr[i]>arr[i-1] && arr[i]>arr[i+1]){
-			cout<<arr[i]<<" ";
-		}
-	}
-	if(arr[n-1] > arr[n-2])
-		cout<<arr[n-1]<<" ";
-}
-int findPeakElement(int arr[], int low, int high, int n){
-	int mid  = low + (high-low)/2;
-	if((mid == 0 || (arr[mid-1]<=arr[mid]) &&
-	(mid == n-1) || (arr[mid+1] <= arr[mid])))
-		return arr[mid];
-		
-	else if(mid > 0 && arr[mid-1] > arr[mid])	
-		return findPeakElement(arr,low, mid-1, n);
-	else return findPeakElement(arr,mid+1,high,n);	
-}
-int main(){
-	int n;
-	cin >> n;
-	int arr[n];
-	for(int i=0;i<n;i++)
-		cin >> arr[i];	
-	
-	//cout<<peakElement(arr,n)<<endl;	
-	cout<<findPeakElement(arr,0,n-1,n);	
-}
Index: binarySearch.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/binarySearch.cpp b/binarySearch.cpp
deleted file mode 100644
--- a/binarySearch.cpp	
+++ /dev/null	
@@ -1,26 +0,0 @@
-#include<bits/stdc++.h>
-using namespace std;
-int binarySearch(int arr[], int n, int key){
-	int low = 0;
-	int high = n;
-	int mid;
-	while(low < high){
-		mid = low + (high-low)/2;
-		if(arr[mid] == key)
-			return mid;
-		else if(arr[mid] < key){
-			low = mid+1;
-		}else high = mid-1;	
-	}
-	return mid+1;
-}
-int main(){
-	int n;
-	cin >> n;
-	int arr[n];
-	for(int i=0;i<n;i++)
-		cin >> arr[i];
-	int key;
-	cin >> key;
-	cout<<binarySearch(arr,n,key)<<endl;
-}
Index: OptimalBST.java
===================================================================
diff --git a/OptimalBST.java b/Important/OptimalBST.java
rename from OptimalBST.java
rename to Important/OptimalBST.java
--- a/OptimalBST.java	
+++ b/Important/OptimalBST.java	
@@ -1,4 +1,4 @@
-package dp;
+package Important;
 
 public class OptimalBST {
     static int[][] dp;
@@ -12,7 +12,7 @@
     }
 
     private static int optimalSearchTree(int[] keys, int[] freq, int l,int r) {
-      // System.out.println("l and r is " + l + "  " + r);
+
         if(l > r) {
             return 0;
         }
@@ -20,7 +20,6 @@
             return freq[l];
         }
         if(dp[l][r] != 0) {
-
             return dp[l][r];
         }
         int minVal = Integer.MAX_VALUE;
@@ -29,7 +28,6 @@
         for(int k=l;k<=r;k++) {
             int sum = optimalSearchTree(keys, freq, l, k-1) + optimalSearchTree(keys, freq, k+1, r);
             dp[l][r] = sum;
-          //  System.out.println("Setting l and r " + l + "  " + r);
             if(sum < minVal) {
                 minVal = sum;
             }
Index: Blind75/array/maxProductSubArray.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Blind75/array/maxProductSubArray.java b/Blind75/array/maxProductSubArray.java
--- a/Blind75/array/maxProductSubArray.java	
+++ b/Blind75/array/maxProductSubArray.java	
@@ -1,4 +1,4 @@
-package Blind75.array;
+package dp.Blind75.array;
 
 public class maxProductSubArray {
 
Index: Blind75/array/ContainsDuplicate.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Blind75/array/ContainsDuplicate.java b/Blind75/array/ContainsDuplicate.java
--- a/Blind75/array/ContainsDuplicate.java	
+++ b/Blind75/array/ContainsDuplicate.java	
@@ -1,4 +1,4 @@
-package Blind75.array;
+package dp.Blind75.array;
 
 import java.util.Arrays;
 import java.util.HashMap;
Index: Blind75/Graph/UndirectedGraphCycle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Blind75/Graph/UndirectedGraphCycle.java b/Blind75/Graph/UndirectedGraphCycle.java
--- a/Blind75/Graph/UndirectedGraphCycle.java	
+++ b/Blind75/Graph/UndirectedGraphCycle.java	
@@ -132,11 +132,11 @@
 
 
     public static void main(String[] args) {
-        UndirectedGraphCycle graph = new UndirectedGraphCycle(5);
+        UndirectedGraphCycle graph = new UndirectedGraphCycle(2);
         graph.addEdge(0,1);
-        graph.addEdge(0,2);
-        graph.addEdge(2,1);
-        graph.addEdge(2,3);
+//        graph.addEdge(0,2);
+//        graph.addEdge(2,1);
+//        graph.addEdge(2,3);
       //  graph.addEdge(3,4);
 
         graph.bfs();
Index: Blind75/Graph/GraphAdjList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Blind75/Graph/GraphAdjList.java b/Blind75/Graph/GraphAdjList.java
--- a/Blind75/Graph/GraphAdjList.java	
+++ b/Blind75/Graph/GraphAdjList.java	
@@ -6,6 +6,7 @@
 import java.util.Queue;
 import java.util.Stack;
 
+
 public class GraphAdjList {
     private List<Integer> adjList[];
     private int V;
@@ -23,9 +24,14 @@
       //  adjList[v].add(u);
     }
 
-    public void dfs(int src) {
+    public void dfs() {
         boolean[] visited = new boolean[V];
-        dfsUtil(src, visited);
+        for(int i=0;i<V;i++) {
+            if(!visited[i]) {
+                dfsUtil(i, visited);
+            }
+        }
+
     }
 
     private void dfsUtil(int src, boolean[] visited) {
@@ -87,7 +93,7 @@
         graph.addEdge(3, 3);
 
         System.out.println("DFS is ");
-        graph.dfs(0);
+        graph.dfs();
         System.out.println("\nIterative DFS is ");
         graph.dfsIterative(0);
         System.out.println();
Index: .idea/Competitive-Programming.iml
===================================================================
diff --git a/.idea/Competitive-Programming.iml b/.idea/Competitive-Programming.iml
new file mode 100644
--- /dev/null	
+++ b/.idea/Competitive-Programming.iml	
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: CoinExchangeWays.java
===================================================================
diff --git a/CoinExchangeWays.java b/Important/CoinExchangeWays.java
rename from CoinExchangeWays.java
rename to Important/CoinExchangeWays.java
--- a/CoinExchangeWays.java	
+++ b/Important/CoinExchangeWays.java	
@@ -1,4 +1,4 @@
-package dp;
+package dp.Important;
 
 public class CoinExchangeWays {
 
Index: .idea/modules.xml
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/modules.xml	
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/Competitive-Programming.iml" filepath="$PROJECT_DIR$/Competitive-Programming.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: WordBreak.java
===================================================================
diff --git a/WordBreak.java b/Important/WordBreak.java
rename from WordBreak.java
rename to Important/WordBreak.java
--- a/WordBreak.java	
+++ b/Important/WordBreak.java	
@@ -1,4 +1,4 @@
-package dp;
+package dp.Important;
 
 import java.util.Arrays;
 import java.util.List;
Index: .idea/vcs.xml
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/vcs.xml	
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: LPS.java
===================================================================
diff --git a/LPS.java b/Important/LPS.java
rename from LPS.java
rename to Important/LPS.java
--- a/LPS.java	
+++ b/Important/LPS.java	
@@ -1,3 +1,5 @@
+package dp.Important;
+
 import java.util.Scanner;
 
 public class LPS {
Index: RatInAMaze.java
===================================================================
diff --git a/RatInAMaze.java b/Important/RatInAMaze.java
rename from RatInAMaze.java
rename to Important/RatInAMaze.java
--- a/RatInAMaze.java	
+++ b/Important/RatInAMaze.java	
@@ -1,3 +1,5 @@
+package Important;
+
 public class RatInAMaze {
 
     private static boolean isValid(int[][] maze, int x, int y, int[][] sol) {
Index: RottonOrange.java
===================================================================
diff --git a/RottonOrange.java b/Important/RottenOranges.java
rename from RottonOrange.java
rename to Important/RottenOranges.java
--- a/RottonOrange.java	
+++ b/Important/RottenOranges.java	
@@ -1,3 +1,5 @@
+package dp.Important;
+
 import java.util.LinkedList;
 import java.util.Queue;
 
Index: LCSubstring.java
===================================================================
diff --git a/LCSubstring.java b/Important/LCSubstring.java
rename from LCSubstring.java
rename to Important/LCSubstring.java
--- a/LCSubstring.java	
+++ b/Important/LCSubstring.java	
@@ -1,4 +1,4 @@
-package dp;
+package dp.Important;
 
 public class LCSubstring {
     private static int getLCS(String str1, String str2) {
Index: LCSubsequence.java
===================================================================
diff --git a/LCSubsequence.java b/Important/LCSubsequence.java
rename from LCSubsequence.java
rename to Important/LCSubsequence.java
--- a/LCSubsequence.java	
+++ b/Important/LCSubsequence.java	
@@ -1,4 +1,4 @@
-package dp;
+package dp.Important;
 
 public class LCSubsequence {
 
Index: ThreeSum.java
===================================================================
diff --git a/ThreeSum.java b/Important/ThreeSum.java
rename from ThreeSum.java
rename to Important/ThreeSum.java
--- a/ThreeSum.java	
+++ b/Important/ThreeSum.java	
@@ -1,3 +1,5 @@
+package dp.Important;
+
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Map;
Index: NQueen.java
===================================================================
diff --git a/NQueen.java b/Important/NQueen.java
rename from NQueen.java
rename to Important/NQueen.java
--- a/NQueen.java	
+++ b/Important/NQueen.java	
@@ -1,3 +1,5 @@
+package Important;
+
 import java.util.Scanner;
 
 public class NQueen {
Index: MinimumDeletionPalindrome.java
===================================================================
diff --git a/MinimumDeletionPalindrome.java b/Important/MinimumDeletionPalindrome.java
rename from MinimumDeletionPalindrome.java
rename to Important/MinimumDeletionPalindrome.java
--- a/MinimumDeletionPalindrome.java	
+++ b/Important/MinimumDeletionPalindrome.java	
@@ -1,4 +1,4 @@
-package dp;
+package dp.Important;
 
 import java.util.Arrays;
 import java.util.LinkedList;
Index: .idea/.gitignore
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	
+++ b/.idea/.gitignore	
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: KnightTour.java
===================================================================
diff --git a/KnightTour.java b/Important/KnightTour.java
rename from KnightTour.java
rename to Important/KnightTour.java
--- a/KnightTour.java	
+++ b/Important/KnightTour.java	
@@ -1,3 +1,5 @@
+package dp.Important;
+
 import java.util.Arrays;
 import java.util.Scanner;
 
Index: SmallestSubstringHavingAllCharacter.java
===================================================================
diff --git a/SmallestSubstringHavingAllCharacter.java b/Important/SmallestWindowContainingOtherString.java
rename from SmallestSubstringHavingAllCharacter.java
rename to Important/SmallestWindowContainingOtherString.java
--- a/SmallestSubstringHavingAllCharacter.java	
+++ b/Important/SmallestWindowContainingOtherString.java	
@@ -1,4 +1,6 @@
-public class SmallestWindow {
+package Important;
+
+public class SmallestWindowContainingOtherString {
 
     private static final int MAX_LEN = 256;
 
Index: SubsetSum.java
===================================================================
diff --git a/SubsetSum.java b/Important/SubsetSum.java
rename from SubsetSum.java
rename to Important/SubsetSum.java
--- a/SubsetSum.java	
+++ b/Important/SubsetSum.java	
@@ -1,4 +1,4 @@
-package dp;
+package Important;
 
 public class SubsetSum {
     static boolean dp[][];
@@ -20,9 +20,27 @@
     }
     public static void main(String args[]) {
         int set[] = {   3, 34, 4, 12, 5, 2 };
-        int sum = 149;
+        int sum = 213;
         int n = set.length;
         dp = new boolean[n+1][sum+1];
         System.out.println(checkSubsetSum(set, n, sum));
+
+        System.out.println("optimised approach ");
+        System.out.println(isSubsetSumExist(set, sum));
+    }
+
+    private static boolean isSubsetSumExist(int[] arr, int sum) {
+        int n = arr.length;
+        boolean dp[] = new boolean[sum+1];
+        dp[0] = true;
+        for(int i=0;i<n;i++) {
+            for(int j=sum;j>=arr[i];j--){
+                if(dp[j-arr[i]] == true){
+                    dp[j] = true;
+                }
+            }
+        }
+
+        return dp[sum];
     }
 }
Index: LIS.java
===================================================================
diff --git a/LIS.java b/Important/LIS.java
rename from LIS.java
rename to Important/LIS.java
--- a/LIS.java	
+++ b/Important/LIS.java	
@@ -1,4 +1,4 @@
-package dp;
+package dp.Important;
 
 import java.util.Arrays;
 
Index: Test.java
===================================================================
diff --git a/Test.java b/Test.java
new file mode 100644
--- /dev/null	
+++ b/Test.java	
@@ -0,0 +1,24 @@
+import java.util.Map;
+import java.util.function.Function;
+import java.util.stream.Collectors;
+
+public class Test {
+
+    public static void main(String[] args) {
+        System.out.println("test");
+
+        String s = "bbvuunhhaejjj";
+
+        Map<Character, Long> freQMap = s.chars()
+                .mapToObj(x->(char)x).collect(Collectors.groupingBy(x->x, Collectors.counting()));
+        //  System.out.println(freQMap);
+
+        // freQMap.forEach()
+
+
+        freQMap.entrySet().stream().sorted(Map.Entry.comparingByValue()).forEach((x)->System.out.
+                println((x.getKey() + " " +x.getValue())));
+
+
+    }
+}
Index: Blind75/dp/CombinationSum2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Blind75/dp/CombinationSum2.java b/Blind75/dp/CombinationSum2.java
--- a/Blind75/dp/CombinationSum2.java	
+++ b/Blind75/dp/CombinationSum2.java	
@@ -60,8 +60,8 @@
     }
 
     public static void main(String[] args) {
-        int[] arr = {10,1,2,7,6,1,5};
-        int target = 8;
+        int[] arr = {1,2,3};
+        int target = 5;
         Arrays.sort(arr);
 
         List<List<Integer>> result = getAllCombinationSum(arr, target);
Index: BinomailCoefficient.java
===================================================================
diff --git a/BinomailCoefficient.java b/Important/BinomailCoefficient.java
rename from BinomailCoefficient.java
rename to Important/BinomailCoefficient.java
--- a/BinomailCoefficient.java	
+++ b/Important/BinomailCoefficient.java	
@@ -1,4 +1,4 @@
-package dp;
+package dp.Important;
 
 public class BinomailCoefficient {
     private static int getCoefficient(int x, int y) {
Index: Blind75/dp/LongestCommonSubstring.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Blind75/dp/LongestCommonSubstring.java b/Blind75/dp/LongestCommonSubstring.java
--- a/Blind75/dp/LongestCommonSubstring.java	
+++ b/Blind75/dp/LongestCommonSubstring.java	
@@ -1,4 +1,4 @@
-package Blind75.DP;
+package Blind75.dp;
 
 public class LongestCommonSubstring {
 
@@ -43,8 +43,8 @@
     }
 
     public static void main(String[] args) {
-        String str1 = "zxabcdezy";
-        String str2 = "yzabcdezx";
+        String str1 = "abcd";
+        String str2 = "abcz";
         int n = str1.length();
         int m = str2.length();
         System.out.println(getLCSRecr(str1, str2, n, m, 0));
Index: UniquePaths.java
===================================================================
diff --git a/UniquePaths.java b/Important/UniquePaths.java
rename from UniquePaths.java
rename to Important/UniquePaths.java
--- a/UniquePaths.java	
+++ b/Important/UniquePaths.java	
@@ -1,4 +1,4 @@
-package Blind75.DP;
+package dp.Important;
 
 public class UniquePaths {
     private static int totalPaths(int n, int m) {
Index: minimumDenomination.java
===================================================================
diff --git a/minimumDenomination.java b/Important/minimumDenomination.java
rename from minimumDenomination.java
rename to Important/minimumDenomination.java
--- a/minimumDenomination.java	
+++ b/Important/minimumDenomination.java	
@@ -1,4 +1,4 @@
-package dp;
+package Important;
 
 import java.util.Arrays;
 
Index: Blind75/dp/WaysToExchangeCoin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Blind75/dp/WaysToExchangeCoin.java b/Blind75/dp/WaysToExchangeCoin.java
--- a/Blind75/dp/WaysToExchangeCoin.java	
+++ b/Blind75/dp/WaysToExchangeCoin.java	
@@ -2,6 +2,7 @@
 
 public class WaysToExchangeCoin {
 
+    static int[][] dp;
     private static int getWaysToExchangeCoinRecr(int[] coins, int n, int target) {
         if(target == 0) {
             return 1;
@@ -14,7 +15,11 @@
             return 0;
         }
 
-        return getWaysToExchangeCoinRecr(coins, n-1, target) +
+        if(dp[n][target] != 0) {
+            System.out.println("Coming inside memoized");
+            return dp[n][target];
+        }
+        return dp[n][target] = getWaysToExchangeCoinRecr(coins, n-1, target) +
                 getWaysToExchangeCoinRecr(coins, n, target-coins[n-1]);
     }
 
@@ -31,9 +36,10 @@
     }
 
     public static void main(String[] args) {
-        int[] coins = {2,3,6,7};
-        int target = 7;
+        int[] coins = {1,2,3};
+        int target = 5;
 
+        dp = new int[coins.length+1][target+1];
         System.out.println(getWaysToExchangeCoinRecr(coins, coins.length, target));
         System.out.println(getWaysToExchangeCoin(coins, target));
     }
Index: MSIS.java
===================================================================
diff --git a/MSIS.java b/Important/MSIS.java
rename from MSIS.java
rename to Important/MSIS.java
--- a/MSIS.java	
+++ b/Important/MSIS.java	
@@ -1,4 +1,4 @@
-package dp;
+package dp.Important;
 
 public class MSIS {
 
diff --git a/README.md b/Important/README.md
rename from README.md
rename to Important/README.md
