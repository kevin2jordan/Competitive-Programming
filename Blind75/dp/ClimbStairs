package Blind75.DP;

public class ClimbStairs {
    static int[] dp;

    private static int sol1(int n) {
        int a = 0;
        int b = 1;
        int fib = 0;

        for(int i=1;i<=n;i++) {
            fib = a+b;
            a = b;
            b = fib;
        }
        return fib;
        /*
            Time : O(n)
            Space: O(1)
         */
    }
    private static int sol2(int n) {
        if(n == 0 || n == 1) {
            return 1;
        }

        return sol2(n-1) + sol2(n-2);
        /*
            Time : O(2^n)
            Space: O(n) - height of the recursive call tree
         */
    }

    private static int sol3(int n) {
        int[] dp = new int[n+1];
        dp[0] = 0;
        dp[1] = 1;
        for(int i=2;i<=n;i++) {
            dp[i] = dp[i-1]+dp[i-2];
        }

        return dp[n];

        /*
            Time : O(n)
            Space: O(n)
         */
    }

    private static int sol4(int n) {
        if(dp[n] != 0) {
            return dp[n];
        }
        if(n==0 || n==1) {
            return 1;
        }

        return dp[n] = sol4(n-1) + sol4(n-2);
        /*
            Time : O(n)
            Space: O(n)
         */
    }

    private static int climbStairs(int n) {
        return sol4(n);
    }

    private static int genericClimbStairs(int n, int m) {
        if(dp[n] != 0) {
            return dp[n];
        }
        if(n<=1) {
            return n;
        }
        int result = 0;
        for(int i=1;i<=m && i<=n; i++) {
            result += genericClimbStairs(n-i, m);
        }

        return dp[n] = result;
    }
    public static void main(String[] args) {

        int n = 10;
        dp = new int[n+1];
       // System.out.println(climbStairs(n));
        System.out.println(genericClimbStairs(6,3));
    }
}
