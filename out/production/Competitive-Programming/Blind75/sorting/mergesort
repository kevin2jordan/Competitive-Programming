package Blind75.Sorting;

public class MergeSort {

    private static void merge(int[] arr, int l, int mid, int r) {
        int n = mid-l+1;
        int m = r-mid;

        int[] left = new int[n];
        int[] right = new int[m];
        for(int i=0;i<n;i++) {
            left[i] = arr[l+i];
        }
        for(int j=0;j<m;j++) {
            right[j] = arr[mid+j+1];
        }
        int i=0,j=0,k=l;
        while(i<n && j<m) {
            if(left[i] <= right[j]) {
                arr[k] = left[i++];
            } else {
                arr[k] = right[j++];
            }
            k++;
        }

        while(i<n) {
            arr[k++] = left[i++];
        }
        while(j<m) {
            arr[k++] = right[j++];
        }
    }

    private static void mergeSort(int[] arr, int l, int r) {
        if(l < r) {
            int mid = l + (r - l) / 2;
            mergeSort(arr, l, mid);
            mergeSort(arr, mid + 1, r);
            merge(arr, l, mid, r);
        }
    }
    public static void main(String args[]) {
        int arr[] = {9,8,2,4,5,10,11,13};

        mergeSort(arr, 0, arr.length-1);
        for(int ele : arr) {
            System.out.print(ele + " ");
        }
    }
}
